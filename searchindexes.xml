<?xml version="1.0" encoding="utf-8" standalone="yes"?><search><entry><title>监控TCP11种状态集命令、脚本（centos7）</title><url>/post/surveillance-tcp-11-status-set-commands-and-scripts-centos7-zbpvsa.html</url><categories><category>技术</category></categories><tags><tag>运维</tag><tag>Linux</tag><tag>TCP/IP</tag></tags><content type="html"><![CDATA[  监控TCP11种状态集命令、脚本（centos7） 先决条件：
用户有足够的权限来执行 netstat​ 命令。
不是root用户可能需要在命令前加上 sudo​。
安装了 netstat​。
命令合集，脚本：
#!/bin/bash # 清除旧的输出 clear # 显示所有TCP连接的状态 echo &amp;#34;所有TCP连接状态：&amp;#34; netstat -ant # 显示LISTEN状态的连接 echo &amp;#34;处于LISTEN状态的连接：&amp;#34; netstat -an | grep LISTEN # 显示SYN_SENT状态的连接 echo &amp;#34;处于SYN_SENT状态的连接：&amp;#34; netstat -an | grep SYN_SENT # 显示SYN_RECEIVED状态的连接 echo &amp;#34;处于SYN_RECEIVED状态的连接：&amp;#34; netstat -an | grep SYN_RECEIVED # 显示ESTABLISHED状态的连接 echo &amp;#34;处于ESTABLISHED状态的连接：&amp;#34; netstat -an | grep ESTABLISHED # 显示FIN_WAIT1状态的连接 echo &amp;#34;处于FIN_WAIT1状态的连接：&amp;#34; netstat -an | grep FIN_WAIT1 # 显示FIN_WAIT2状态的连接 echo &amp;#34;处于FIN_WAIT2状态的连接：&amp;#34; netstat -an | grep FIN_WAIT2 # 显示CLOSE_WAIT状态的连接 echo &amp;#34;处于CLOSE_WAIT状态的连接：&amp;#34; netstat -an | grep CLOSE_WAIT # 显示CLOSING状态的连接 echo &amp;#34;处于CLOSING状态的连接：&amp;#34; netstat -an | grep CLOSING # 显示LAST_ACK状态的连接 echo &amp;#34;处于LAST_ACK状态的连接：&amp;#34; netstat -an | grep LAST_ACK # 显示TIME_WAIT状态的连接 echo &amp;#34;处于TIME_WAIT状态的连接：&amp;#34; netstat -an | grep TIME_WAIT # 显 …  ]]></content></entry><entry><title>seafile升级最新版注意事项（11.05版本为例）</title><url>/post/seafile-upgrade-the-latest-version-of-precautions-u4rxq.html</url><categories><category>技术</category></categories><tags><tag>运维</tag><tag>Linux</tag><tag>seafile</tag></tags><content type="html"><![CDATA[  seafile升级最新版注意事项（11.05版本为例） 笔者以当前最新版11.05为例，以下内容为亲测
‍
1、docker-compose.yml文件不能使用seafileltd/seafile-mc:latest，得用seafileltd/seafile-mc:11.05，具体原因不明，seafileltd/seafile-mc:latest现在是8.07的版本
2、升级后会发现无法进入管理页面，此时需要添加到 相应的 Django 设置 中conf/seahub_settings.py​：
参考： 更新到 Seafile 11.0.0 后，docker 的 CSRF 验证失败 · Issue #2707 · haiwen/seafile · GitHub CSRF_TRUSTED_ORIGINS = [&#34;https://seafile.example.com&#34;] 使用上面参考提到的 docker-compose 文件，该文件位于容器外部的/home/me/seafile/data/seafile/conf/seahub_settings.py​，在该文件最后新增一行CSRF_TRUSTED_ORIGINS = [&quot;https://seafile.example.com&quot;]​
暂时没有碰到其他问题
  ]]></content></entry><entry><title>zabbix客户端一键安装脚本</title><url>/post/zabbix-client-one-click-installation-script-z5pc5h.html</url><categories><category>技术</category></categories><tags><tag>运维</tag><tag>Linux</tag><tag>zabbix</tag></tags><content type="html"><![CDATA[  zabbix客户端（agent）一键安装初始配置脚本 本环境：centos7.9
简易安装脚本，Server=192.168.2.111​此处需要修改为server的ip地址
#!/bin/bash # 关闭SELinux、暂停防火墙 setenforce 0 systemctl stop firewalld # 安装Zabbix仓库和zabbix-agent zabbix-get rpm -ivh https://mirrors.tuna.tsinghua.edu.cn/zabbix/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-1.el7.noarch.rpm sed -i &#39;s#repo.zabbix.com#mirrors.tuna.tsinghua.edu.cn/zabbix#g&#39; /etc/yum.repos.d/zabbix.repo yum install -y zabbix-agent zabbix-get.x86_64 net-tools # 配置zabbix-agent，Server和ServerActive保持一致，Hostname根据情况修改 cat &lt;&lt; &#39;EOF&#39; &gt; /etc/zabbix/zabbix_agentd.conf PidFile=/var/run/zabbix/zabbix_agentd.pid LogFile=/var/log/zabbix/zabbix_agentd.log LogFileSize=0 Server=192.168.2.111 ServerActive=192.168.2.111 Hostname=Zabbix agent Include=/etc/zabbix/zabbix_agentd.d/*.conf EOF # 启动zabbix-agent并检查 systemctl start zabbix-agent.service systemctl enable zabbix-agent.service netstat -lntup | grep 10050   ]]></content></entry><entry><title>zabbix服务端一键安装初始配置脚本</title><url>/post/the-zabbix-service-side-is-one-click-to-install-the-initial-configuration-script-9alkk.html</url><categories><category>技术</category></categories><tags><tag>运维</tag><tag>Linux</tag><tag>zabbix</tag></tags><content type="html"><![CDATA[  zabbix服务端一键安装初始配置脚本 简易脚本，初始化数据库可以改，centos7.9亲测完美执行
#!/bin/bash # 关闭SELinux、暂停防火墙 setenforce 0 systemctl stop firewalld # 中文乱码修正 yum install -y wqy-microhei-fonts \cp -f /usr/share/fonts/wqy-microhei/wqy-microhei.ttc /usr/share/zabbix/assets/fonts/graphfont.ttf # 安装Zabbix rpm -ivh https://mirrors.tuna.tsinghua.edu.cn/zabbix/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-1.el7.noarch.rpm sed -i &amp;#39;s#repo.zabbix.com#mirrors.tuna.tsinghua.edu.cn/zabbix#g&amp;#39; /etc/yum.repos.d/zabbix.repo yum install -y zabbix-server-mysql zabbix-web-mysql zabbix-agent mariadb-server systemctl start mariadb.service &amp;amp;&amp;amp; systemctl enable mariadb.service echo &amp;#34;rpm和yum安装Zabbixc完成&amp;#34; # 初始化数据库 # mysql_secure_installation mysqladmin password 123456 mysql -uroot -p123456 &amp;lt;&amp;lt;EOF CREATE DATABASE zabbix character set utf8 collate utf8_bin; GRANT ALL PRIVILEGES ON zabbix.* TO &amp;#39;zabbix&amp;#39;@&amp;#39;localhost&amp;#39; IDENTIFIED BY &amp;#39;zabbix&amp;#39;; FLUSH PRIVILEGES; EOF echo &amp;#34;初始化数据库完成&amp;#34; # 备份并修改Zabbix …  ]]></content></entry><entry><title>执行shell脚本文件有多少种方法？有什么区别？</title><url>/post/how-many-ways-are-there-to-execute-the-shell-script-file-what-s-the-difference-18mzrt.html</url><categories><category>技术</category></categories><tags><tag>Linux</tag><tag>运维</tag></tags><content type="html"> 执行shell脚本文件有多少种方法？有什么区别？ 执行.sh​文件有几种方法，主要包括：
直接运行：
./your_script.sh 这种方式需要在脚本文件的目录下执行，并确保脚本文件有执行权限 (chmod +x your_script.sh​)。这种方式的路径解析是相对于当前工作目录的。
通过bash解释器运行：
bash your_script.sh 或者
sh your_script.sh 这种方式不需要执行权限，会使用指定的解释器来运行脚本。如果你使用bash​或sh​关键字，可以确保脚本在不同的环境中都能运行。
通过source命令运行：
source your_script.sh 或者简写为：
. your_script.sh 这种方式会在当前shell环境中执行脚本，而不是启动一个新的进程。这意味着脚本中的变量和函数等将在当前shell中生效。
这几种方法的主要区别在于执行环境和作用域。直接运行和通过bash解释器运行都会创建一个新的进程，而source命令则在当前shell中执行，因此会影响当前环境。选择执行方式取决于你的需求，如果脚本需要修改当前shell的环境变量或执行其他会影响当前环境的操作，建议使用source命令。</content></entry><entry><title>思源笔记一键发布至Hexo、Hugo、Jekyll、Vitepress、Vuepress博客（github）并通过github action构建page并同步gitee page</title><url>/post/siyuan-notes-are-published-to-hexo-hugo-jekyll-vitepress-vuepress-blog-github-and-through-github-action-bsbh2.html</url><categories><category>技术</category></categories><tags><tag>思源笔记</tag><tag>运维</tag></tags><content type="html"><![CDATA[  思源笔记一键发布至Hexo、Hugo、Jekyll、Vitepress、Vuepress博客（github）并通过github action构建page并同步gitee page 先决条件：思源笔记、一键发布工具、Hexo\Hugo\Jekyll\Vitepress\Vuepress相关主题
以Hugo的 hugo-theme-next 主题示例，其他的同理，构建文件不同
注意事项：Hugo使用无序和有序列表尽量不要超过3层
部署和配置时长：1小时+
部署流程：克隆Hugo主题至自己仓库-&amp;gt;创建主页仓库-&amp;gt;获取github个人访问令牌token-&amp;gt;github action构建并输出至主页主页-&amp;gt;gitee导入github仓库并配置镜像仓库-&amp;gt;开通gitee page-&amp;gt;配置 hugo-theme-next 使用流程：思源笔记一键发布插件配置-&amp;gt;使用一键发布插件发布文章并选择hugo
部署详情：
克隆Hugo主题至自己仓库
⏬ 克隆主题 点击右上角的 Use this template​​ 绿色按钮然后填写代码仓库的相关信息，参考如下：
​ https://camo.githubusercontent.com/0031520ad9bb551333a37cf756fbfb3f538e6f33638cd3318e5d70f94aae28e8/68747470733a2f2f696d67732e6c6973656e6875692e636e2f6875676f2d6e6578742f7573652d6875676f2d6e6578742d737461727465722e706e67 最后点击 Create repository from template​​ 绿色按钮，会直接在你的空间中生成站点代码，再使用git clone​​命令把它克隆到本地进行创作。
记得首次完全克隆后，需要在根目录中使用如下的 Git​​ 子模块更新命令拉取 hugo-theme-next​​ 主题的最新版本。
创建主页仓库
自定义首页，首先需要创建一个与你 Github ID 同名的仓库
​​
创建完成后就可以开始为你的首页添加一些有趣的内容了，代码格式可以是 markdown​ 语法，也可以是 HTML​ 语法，但 HTML 的扩展性更强一点，因此笔者使 …  ]]></content></entry><entry><title>Zabbix学习路线及重难点摘录</title><url>/post/zabbix-learning-route-and-heavy-difficulties-excerpt-zovbcn.html</url><categories><category>技术</category></categories><tags><tag>运维</tag><tag>Linux</tag><tag>zabbix</tag></tags><content type="html"> Zabbix学习路线及重难点摘录 zabbix相关书籍
Zabbix企业级分布式监控系统 (吴兆松) (Z-Library) 深入理解Zabbix监控系统 (鲍光亚) (Z-Library) roadmap
本文根据参考书籍目录得出roadmap并摘录要点为新手作指引，未完善的内容可自行百度学习
参考书籍：Zabbix企业级分布式监控系统
第1章 开篇——监控系统简介
1.1 监控系统的功能概述（什么是监控系统？） 监控系统，一是监测，二是控制，监测以达到控制的效果，在计算机领域，可以将其分为5种监控类型。
应用性能监控（Application Performance Monitoring）。 业务交易监控（Business Transaction Monitoring）。 网络性能监控（Network Monitoring）。 操作系统监控（System Monitoring）。 网络站点监控（Website Monitoring）。 大规模的监控环境，被监控节点多且监控类型多产生的数据和网络连接开销非常大，数据采集方式除了使用主动采集模式，还需要使用代理架构分摊服务器端的性能开销。
​​
通常监控系统会选用以下 几种数据存储方式。
（1）本地存储。使用本地磁盘，基于文件的方式存储。
（2）使用时序数据库进行数据存储，如古老的环状数据库 （Round Robin Database, RRD）等。近年来，随着时序数据技术的不断发展，出现了比较成熟的时序数据库，如OpenTSDB（底层存储基于 HBase）、Graphite、InfluxDB、Prometheus等，与直接使用文件的存储方式相比，这些时序数据库更加高效。
（ 3 ） 使 用 数 据 库 管 理 系 统 （ Database Management System, DBMS）进行数据存储，如常见的MySQL、Oracle、SQL Server等。使用 这种数据库来存储监控数据，当数据量达到一定规模时，其读/写效率 均会显著下降，数据库的压力比较大，通常优化方案思路有3种，一是 减少数据的存储量；二是优化数据库本身，调整配置参数，优化运行 环境；三是使用分布式数据库和数据库集群技术方案。
（4）使用NoSQL数据库进行数据存储。NoSQL相对于DBMS这种传统 的数据库有着一些天然的优势，单机的QPS通常较 …</content></entry><entry><title>关于 Hugo NexT 组织</title><url>/about.html</url><categories/><tags/><content type="html"> Hugo NexT 组织是由众多喜爱 NexT 主题及风格的世界各地友人共同组建而成，为的就是让这个主题继续在 Hugo 引擎中也能得到发扬光大，在此也欢迎你的加入！
我们的愿景 延续 NexT 经典的黑白调搭配，保持简单的易用性及强大的功能。
使用反馈 加入 GitHub Discussions 或 Gitter 在线讨论 &amp;#x1f37b; GitHub Issues 提交错误报告 &amp;#x1f41b; GitHub Feature 表新功能的想法 &amp;#x2728; 同时国内用户也可加入 QQ 群交流： 604710815</content></entry><entry><title>文章目录导航</title><url>/post/table-of-content.html</url><categories><category>示例</category></categories><tags><tag>目录</tag><tag>导航</tag><tag>博客</tag></tags><content type="html"> 巴顿将军说过：“衡量一个人是否成功，不是看他站到顶峰，而是从顶峰跌落之后的反弹力”，褚时健的人生便是如此，中年发家致富，名利双收，之后又跌落到谷底，等到74岁再创业，10年后带着褚橙归来，东山再起收获亿万财富，他的发展轨迹就是反弹的过程。
早年的故事 起始 2014年的春天，在云南省华宁县和宜良县的交界处，一座名叫矣则的小山村里，一处已经有上百年历史的古旧四合院宅子被拆掉。村委会正带领村民们进行“美丽乡村”的建设，一年以后，旧有村居将再也看不到，代之而起的是钢筋混凝土的新式民居。就像10年、20年前中国大小城市的改造一样，这个群山围绕的小村子也开始陷入“工地模式”。
童年浪花 在江河边长大的孩子几乎都有一个当仁不让的特长：善水。褚时健也不例外，他不仅从小就在南盘江和花鱼塘里扑腾出了上佳的游泳技术，五六岁已经可以一个猛子扎出老远，而且从七八岁就可以在南盘江和河滩上的鱼塘里捉鱼了。
少年故事 褚时健在乡村自由自在生活的十多年，其实正是中国社会风雨飘摇的十多年。特别是1937年卢沟桥事变后，日本人发动全面侵华战争，短短两三年间，中国的大部分国土相继沦陷
激情的青春十年 当上了游击队员 1948年夏天，褚时健回乡，在禄丰车站小学做了一名老师，同时也和褚时仁、褚时杰一起继续保持与共产党组织的联系，做一些传递情报的工作
战火纷飞 因为战斗力相较悬殊，所以游击队只能是靠打一枪换一个地方的办法，专找敌人薄弱的地方攻击，但更多时候，都是在防御和转移阵地。
迎来解放 1949年12月，国民党云南省主席卢汉在昆明宣布起义，云南正式拉开解放的序幕。1950年2月20日，陈赓、宋任穷、周保中率解放军第二野战军第四兵团进入昆明，24日，陈赓宣布云南全境解放。
生活的断层 跌入生活底层 “反右”运动中被打倒的人在“右派”身份确定后，只有一条路可走：下放到农场。农场名副其实，就是干农活儿的地方，必须过和农民一样的生活。
尾声 岁月像一条河 2015年，是褚时健和马静芬结婚60周年，被称为“钻石婚”的纪念年份。这简直是一份人生的奖赏,在中国离婚率愈益升高的当下，60年的婚姻，几乎就像一个前世之梦。一个甲子的相伴相随，褚时健和马静芬共同经历了国家和个人的各种风浪，共同面对过生死。他们两人已经不仅是夫妻，更是一对战友。尽管马静芬偶尔会对褚时健年轻时候的粗心抱怨上两句，但说到最后，她会说一句：“没有我就没 …</content></entry><entry><title>站点示例</title><url>/flinks.html</url><categories/><tags/><content type="html"> 如想交换本站友情链接，请在评论区留下你的站点信息，格式参考如下：
- name: Hugo-NexT desc: Hugo NexT 官方预览网站。 avatar: https://hugo-next.eu.org/imgs/hugo_next_avatar.png link: https://hugo-next.eu.org</content></entry></search>